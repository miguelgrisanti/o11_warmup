-- Read this article. Take a moment and reflect on the implications of how and week SQL
-- executes in the order that it does. Then look at the following examples, and
-- write out in order /explain what order the code runs. 
-- BONUS: after you've going through once and done either (write out/explain)
-- try to go back and do the other.

-- EXAMPLE:
SELECT film_id, title, actor_id
FROM film JOIN film_actor
WHERE language_id = 1 AND
	  rating = 'G'
ORDER BY film_id;

-- ANSWER:
1 - film JOIN film_actor
2 - FROM #1
3 - WHERE language_id = 1 AND rating = 'G'
4 - SELECT *
5 ORDER BY film_id;

-- Alternative answer:
-- We first take the film table and join it to the film_actor table as the base 
-- table for the query. That is then filtered by the WHERE clause to only rows 
-- that have both language_id #1 AND rated 'G'. From that, film_id, title, and 
-- actor_id are selected (/returned), and the results are ordered by film_id.
  
https://jvns.ca/blog/2019/10/03/sql-queries-don-t-start-with-select/
  
  

SELECT payment_date 
From payment
WHERE payment_date > '2007-05-01'
ORDER BY payment_date DESC;

1. The payment table is pulled FROM the database and it refers to the payment_date column looking for the date specified. After that it selects this column with the filtered date rows and orders them according to the code. 


SELECT payment_id, payment_date
From payment
WHERE amount < 3;

2. The query pulls the payment table upfront and filters the where statement being less than 3. After that, it selects the payment id and date columns. 


SELECT customer_id, email, active
From customer
WHERE store_id = 1 AND active = 0
ORDER BY last_update;

3. The customer table is pulled FROM the database. Therefore filtered by statements WHERE store id and active status are specified. This enables the query to select the id, emmail, and active columns and ORDERS them BY the last update. 

-- THESE TWO ARE A BIT TRICKIER
SELECT c.name, COUNT(f.film_id) as total
FROM film as f
JOIN film_category AS fc  ON f.film_id=fc.film_id
JOIN category AS c ON fc.category_id=c.category_id
GROUP BY c.category_id
ORDER BY total DESC ;

4. FROM the dvdrental the film table is pulled with the alias f, it is then JOINED with film category and category tables with their respective aliases. f and fc (film_category) joing through the film_id column and fc and c (category) join through category_id.
Therefore grouped by the category_id on category table, the name column is SELECTED and the film_id column is counted with alias total. To finish they are ordered by the total in descent. 


SELECT *
FROM payment
WHERE amount > (SELECT AVG(amount) FROM payment);

5. The table payment is pulled FROM the database to select the average amount of. This is subqueried to pull the payment table again
to filter that the amount is larger than the average calculated in the subquery. All of the columns from the payment table are selected under this criteria. 




